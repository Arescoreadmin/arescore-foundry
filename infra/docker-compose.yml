version: "3.9"

x-common-env: &common-env
  LOG_ENDPOINT: http://log_indexer:8080/log
  LOG_TOKEN: ${LOG_TOKEN:-changeme-dev}
  REDACT_KEYS: ${REDACT_KEYS:-password,token,apikey,secret}
  JWT_ISSUER: ${JWT_ISSUER:-forge.local}
  JWT_AUD: ${JWT_AUD:-forge}
  SERVICE_TOKEN: ${SERVICE_TOKEN:-dev-svc}

services:
  orchestrator:
    build:
      context: ..
      dockerfile: orchestrator/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: orchestrator
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer

  sentinelcore:
    build:
      context: ..
      dockerfile: sentinelcore/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: sentinelcore
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8001/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer
      - orchestrator

  sentinelred:
    build:
      context: ..
      dockerfile: sentinelred/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: sentinelred
      ENABLE_SENTINELRED: ${ENABLE_SENTINELRED:-false}
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8002/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer
      - orchestrator

  behavior_analytics:
    build:
      context: ..
      dockerfile: behavior_analytics/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: behavior_analytics
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8003/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer

  quarantine_engine:
    build:
      context: ..
      dockerfile: quarantine_engine/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: quarantine_engine
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8004/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer

  notification_dispatcher:
    build:
      context: ..
      dockerfile: notification_dispatcher/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: notification_dispatcher
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
    ports:
      - "8005:8005"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8005/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer

  mutation_engine:
    build:
      context: ..
      dockerfile: mutation_engine/Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: mutation_engine
    ports:
      - "8006:8006"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8006/ready"]
      interval: 20s
      timeout: 3s
      retries: 3
    depends_on:
      - log_indexer

  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    environment:
      # front-end usually just needs API_BASE at runtime (served via /config.js)
      API_BASE: ${API_BASE:-http://localhost:8000}
    ports:
      - "3000:8080" # host:container (Nginx serves 8080)
    depends_on:
      - orchestrator

  log_indexer:
    build:
      context: ..
      dockerfile: log_indexer/Dockerfile
    environment:
      LOG_TOKEN: ${LOG_TOKEN:-changeme-dev}
    ports:
      - "8080:8080"

networks:
  default: {}
