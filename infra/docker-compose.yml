# Clean docker-compose (no 'version:' key)
x-common-env: &common-env
  LOG_ENDPOINT: http://log_indexer:8080/log
  LOG_TOKEN: ${LOG_TOKEN:-changeme-dev}
  SERVICE_TOKEN: ${SERVICE_TOKEN:-dev-svc}

services:
  orchestrator:
    build:
      context: ../orchestrator
      dockerfile: Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: orchestrator
    ports: ["8000:8000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/ready"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 10s

  log_indexer:
    build:
      context: ../log_indexer
      dockerfile: Dockerfile
    environment:
      LOG_TOKEN: ${LOG_TOKEN:-changeme-dev}
    ports: ["8080:8080"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      # Frontend reads /config.js at runtime; keep this for clarity
      API_BASE: ${API_BASE:-/api}
    ports: ["3000:8080"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/ready"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Optional services (won't run unless profile is enabled)
  sentinelcore:
    profiles: ["extended"]
    build:
      context: ../sentinelcore
      dockerfile: Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: sentinelcore
      ORCHESTRATOR_URL: http://orchestrator:8000
    ports: ["8001:8001"]
    restart: unless-stopped
    depends_on:
      orchestrator:
        condition: service_healthy
      log_indexer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8001/ready"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 15s

  sentinelred:
    profiles: ["extended"]
    build:
      context: ../sentinelred
      dockerfile: Dockerfile
    environment:
      <<: *common-env
      SERVICE_NAME: sentinelred
      ORCHESTRATOR_URL: http://orchestrator:8000
    ports: ["8002:8002"]
    restart: unless-stopped
    depends_on:
      orchestrator:
        condition: service_healthy
      log_indexer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8002/ready"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 15s

networks:
  default: {}
