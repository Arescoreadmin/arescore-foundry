# Compose v2 (no version key)
name: arescore-foundry

networks:
  foundry_net: {}

# DRY defaults
x-service-defaults: &svc_defaults
  env_file: [.env]
  networks: [foundry_net]
  restart: unless-stopped

services:
  # ---------- Core Services ----------
  log_indexer:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: log_indexer
    ports:
      - "9000:9000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:9000/health'); sys.exit(0)\" || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s

  orchestrator:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    read_only: true
    cap_drop: ["ALL"]
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,size=32m
    ulimits:
      nofile: 65535
    container_name: orchestrator
    depends_on:
      opa:
        condition: service_healthy
    # Expose orchestrator on host :8010 to avoid clashing with sentinelcore
    ports:
      - "8080:8080"
    environment:
      PYTHONPATH: /app:/app/app
    healthcheck:
       test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys; import json\nu='http://127.0.0.1:8080/health'\ntry:\n  d=json.loads(urllib.request.urlopen(u,timeout=2).read().decode())\n  sys.exit(0 if d.get('ok') else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
       interval: 15s
       timeout: 5s
       retries: 5
       start_period: 5s

  # ---------- Sentinel Stack ----------
  # SentinelCore — single source of truth on port 8000 (fixed)
  sentinelcore:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: sentinelcore
    depends_on:
      log_indexer:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    ports:
      - "8080:8080"   # canonical owner of host:8000
    environment:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app:/app/app
      RAG_CACHE_URL: sqlite:///data/rag_cache.sqlite3
      RAG_QUERY_TTL_SECONDS: "90"
      ENABLE_DEV_ROUTES: "1"
      DEBUG: "1"
      ENV: "dev"
      # MODEL_NAME: local-dev-model
      # ROOT_PATH: ""
    volumes:
      - ./backend/sentinelcore/data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=2); sys.exit(0)"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  sentinelred:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: sentinelred
    depends_on:
      log_indexer:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    ports:
      - "8002:8002"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:8002/health'); sys.exit(0)\" || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s

  mutation_engine:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: mutation_engine
    depends_on:
      log_indexer:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    ports:
      - "8003:8003"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:8003/health'); sys.exit(0)\" || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s

  behavior_analytics:
    <<: *svc_defaults
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: behavior_analytics
    depends_on:
      log_indexer:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    ports:
      - "8004:8004"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; urllib.request.urlopen('http://localhost:8004/health'); sys.exit(0)\" || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
