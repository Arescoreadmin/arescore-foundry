# Included by /etc/nginx/nginx.conf inside the http {} block.

# ---- HTTP-level config -------------------------------------------------------

# Resolve Docker service names at runtime (handles container IP changes)
resolver 127.0.0.11 ipv6=off valid=30s;

# Rate limiting (10 req/s per client, burst 20)
limit_req_zone $binary_remote_addr zone=api_ratelimit:10m rate=10r/s;

# WebSocket upgrade mapping
map $http_upgrade $connection_upgrade { default upgrade; '' close; }

# Hide version
server_tokens off;

# JSON access log format (to stdout)
log_format json_combined escape=json
  '{'
  '"time":"$time_iso8601",'
  '"remote_addr":"$remote_addr",'
  '"request":"$request",'
  '"status":$status,'
  '"body_bytes_sent":$body_bytes_sent,'
  '"request_time":$request_time,'
  '"upstream_response_time":"$upstream_response_time",'
  '"upstream_status":"$upstream_status",'
  '"http_referer":"$http_referer",'
  '"http_user_agent":"$http_user_agent"'
  '}';

# ---- Server block ------------------------------------------------------------

server {
  listen 8080;
  server_name _;

  # Static files (built app)
  root /usr/share/nginx/html;
  index index.html;

  # Security headers (tune CSP to your needs)
  add_header X-Content-Type-Options nosniff always;
  add_header X-Frame-Options DENY always;
  add_header Referrer-Policy no-referrer-when-downgrade always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' data: blob:;" always;

  # Logging to stdout/stderr (for container log collectors)
  access_log /dev/stdout json_combined;
  error_log  /dev/stderr warn;

  # Sensible perf defaults
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;

  # Compression
  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/xml image/svg+xml;
  gzip_min_length 1024;

  # SPA: fallback to index.html
  location / {
    try_files $uri /index.html;
  }

  # Lightweight container readiness
  location = /ready {
    default_type application/json;
    return 200 "{\"ready\":true}";
  }

  # API proxy to orchestrator with timeouts, retries, WS, rate limiting
  location /api/ {
    limit_req zone=api_ratelimit burst=20 nodelay;

    # Dynamic upstream via Docker DNS
    set $orchestrator http://orchestrator:8000;
    proxy_pass $orchestrator;

    proxy_http_version 1.1;

    # WebSockets
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # Forwarded headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_redirect off;

    # Buffering (keeps memory predictable for JSON APIs)
    proxy_buffering on;
    proxy_buffers 16 16k;
    proxy_buffer_size 16k;

    # Tight but forgiving timeouts
    proxy_connect_timeout 1s;
    proxy_send_timeout    6s;
    proxy_read_timeout    6s;

    # Retry on common transient failures
    proxy_next_upstream error timeout http_502 http_503 http_504;
    proxy_next_upstream_tries 3;

    # Explicit status for rate limit hits
    limit_req_status 429;
  }
}
