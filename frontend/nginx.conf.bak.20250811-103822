# http-level (conf.d files are included inside http {})
limit_req_zone $binary_remote_addr zone=api_ratelimit:10m rate=10r/s;
map $http_upgrade $connection_upgrade { default upgrade; '' close; }

log_format json_combined escape=json
  '{'
  '"time":"$time_iso8601",'
  '"remote_addr":"$remote_addr",'
  '"request":"$request",'
  '"status":$status,'
  '"body_bytes_sent":$body_bytes_sent,'
  '"request_time":$request_time,'
  '"upstream_response_time":"$upstream_response_time",'
  '"upstream_status":"$upstream_status",'
  '"http_referer":"$http_referer",'
  '"http_user_agent":"$http_user_agent"'
  '}';

server {
  listen 8080;
  server_name _;

  root /usr/share/nginx/html;
  index index.html;

  # Security headers (adjust CSP for your app)
  add_header X-Content-Type-Options nosniff always;
  add_header X-Frame-Options DENY always;
  add_header Referrer-Policy no-referrer-when-downgrade always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Request-Id $request_id always;
  add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' data: blob:;" always;

  access_log /dev/stdout json_combined;
  error_log  /dev/stderr warn;

  # SPA route
  # Ensure no-store for the app shell
  location = /index.html {
    add_header Cache-Control "no-store" always;
    try_files \$uri =404;
  }

  # Cache immutable for static assets (hashed filenames)
  location ~* \\.(css|js|png|jpg|jpeg|gif|svg|webp|ico|woff2?)$ {
    expires 30d;
    add_header Cache-Control "public, immutable";
    try_files \$uri =404;
  }

  location / { try_files $uri /index.html; }

  # Lightweight ready (silenced)
  location = /ready {
    access_log off;
    default_type application/json;
    return 200 '{"ready":true}';
  }

  # API Readiness â†’ orchestrator /health with fallback (silenced)
  location = /api/ready {
    access_log off;

    proxy_intercept_errors on;
    error_page 502 503 504 = @api_ready_fallback;

    proxy_pass http://orchestrator:8000/health;
    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_connect_timeout 1s;
    proxy_send_timeout    6s;
    proxy_read_timeout    6s;

    proxy_next_upstream error timeout http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
  }

  location @api_ready_fallback {
    default_type application/json;
    return 503 '{"ready":false,"reason":"orchestrator_unreachable"}';
  }

  # API proxy (rate limit + WS + timeouts)
  location /api/ {
    limit_req zone=api_ratelimit burst=20 nodelay;

    proxy_pass http://orchestrator:8000/;
    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;

    proxy_buffers 16 16k;
    proxy_buffer_size 16k;

    proxy_connect_timeout 1s;
    proxy_send_timeout    6s;
    proxy_read_timeout    6s;

    proxy_next_upstream error timeout http_502 http_503 http_504;
    proxy_next_upstream_tries 3;
  }
}
